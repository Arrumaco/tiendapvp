about=List versions of all Rails frameworks and the environment
assets\:clean=Remove compiled assets
assets\:clean\:all=
assets\:environment=
assets\:precompile=Compile all the assets named in config.assets.precompile
assets\:precompile\:all=
assets\:precompile\:nondigest=
assets\:precompile\:primary=
db\:abort_if_pending_migrations=
db\:admin\:create=Create admin username and password
db\:bootstrap=Bootstrap is: migrating, loading defaults, sample data and seeding (for all extensions) invoking create_admin and load_products tasks
db\:charset=
db\:collation=
db\:create=Create the database from config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)
db\:create\:all=
db\:drop=Drops the database for the current Rails.env (use db:drop:all to drop all databases)
db\:drop\:all=
db\:fixtures\:identify=
db\:fixtures\:load=Load fixtures into the current environment's database.  Load specific fixtures using FIXTURES=x,y. Load from subdirectory in test/fixtures using FIXTURES_DIR=z. Specify an alternative path (eg. spec/fixtures) using FIXTURES_PATH=spec/fixtures.
db\:forward=
db\:load_config=
db\:load_dir[dir]=Loads fixtures from the the dir you specify using rake db:load_dir[loadfrom]
db\:load_file[file]=Loads a specified fixture using rake db:load_file[filename.rb]
db\:migrate=Migrate the database (options: VERSION=x, VERBOSE=false).
db\:migrate\:down=
db\:migrate\:redo=
db\:migrate\:reset=
db\:migrate\:status=Display status of migrations
db\:migrate\:up=
db\:remigrate=Migrate schema to version 0 and back up again. WARNING: Destroys all data in tables!!
db\:reset=
db\:rollback=Rolls the schema back to the previous version (specify steps w/ STEP=n).
db\:schema\:dump=Create a db/schema.rb file that can be portably used against any DB supported by AR
db\:schema\:load=Load a schema.rb file into the database
db\:seed=Load the seed data from db/seeds.rb
db\:sessions\:clear=
db\:sessions\:create=
db\:setup=Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)
db\:structure\:dump=Dump the database structure to an SQL file
db\:test\:clone=
db\:test\:clone_structure=
db\:test\:load=
db\:test\:prepare=
db\:test\:purge=
db\:version=Retrieves the current schema version number
deface\:clean=Removes all precompiled override templates
deface\:get_result[virtual_path]=Get the resulting markup for a partial/template
deface\:precompile=Precompiles overrides into template files
deface\:test_selector[virtual_path,selector]=Applies selectors to given partial/template, and returns match(s) source.
default=
doc=
doc/api=
doc/api/index.html=
doc/app=
doc/app/index.html=
doc\:app=Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE="Custom Title")
doc\:clobber=
doc\:clobber_app=
doc\:clobber_plugins=
doc\:clobber_rails=
doc\:guides=
doc\:plugins=
doc\:rails=
doc\:reapp=
doc\:rerails=
environment=
log\:clear=Truncates all *.log files in log/ to zero bytes
middleware=Prints out your Rack middleware stack
notes=Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)
notes\:custom=Enumerate a custom annotation, specify with ANNOTATION=CUSTOM
notes\:fixme=
notes\:optimize=
notes\:todo=
paperclip\:clean=Cleans out invalid attachments. Useful after you've added new validations.
paperclip\:refresh=Refreshes both metadata and thumbnails.
paperclip\:refresh\:metadata=Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT).
paperclip\:refresh\:missing_styles=Regenerates missing thumbnail styles for all classes using Paperclip.
paperclip\:refresh\:thumbnails=Regenerates thumbnails for a given CLASS (and optional ATTACHMENT and STYLES splitted by comma).
rails\:template=Applies the template supplied by LOCATION=(/path/to/template) or URL
rails\:templates\:copy=
rails\:update=Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)
rails\:update\:application_controller=
rails\:update\:configs=
rails\:update\:scripts=
rails_env=
railties\:install\:migrations=
routes=Print out all defined routes in match order, with names. Target specific controller with CONTROLLER=x.
secret=Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions).
spree\:assets\:relocate_images=Relocates files from public/assets directory
spree\:assets\:sync_images=Copies images from all app/assets directories into public/assets
spree\:extensions\:promotions\:update=Copies public assets of the Promotions to the instance public/ directory.
spree\:reset_taxon_permalinks=Resets all taxon permalinks
spree\:sync=Synchronize public assets, migrations, seed and sample data from the Spree gems
spree_api\:install\:migrations=Copy migrations from spree_api to application
spree_auth\:install\:migrations=Copy migrations from spree_auth to application
spree_core\:install=
spree_core\:install\:assets=
spree_core\:install\:migrations=Copy migrations from spree_core to application
spree_i18n\:new=Create a new translation file based on en
spree_i18n\:stats=Show translation status for all supported locales other than en.
spree_i18n\:sync=Syncronize translation files with latest en (adds comments with fallback en value)
spree_i18n\:update_default=Update by retrieving the latest Spree locale fils
spree_promo\:install\:migrations=Copy migrations from spree_promo to application
spree_sample\:load=Loads sample data
state_machine\:draw=Draws a set of state machines using GraphViz. Target files to load with FILE=x,y,z; Machine class with CLASS=x,y,z; Font name with FONT=x; Image format with FORMAT=x; Orientation with ORIENTATION=x / Draws a set of state machines using GraphViz. Target files to load with FILE=x,y,z; Machine class with CLASS=x,y,z; Font name with FONT=x; Image format with FORMAT=x; Orientation with ORIENTATION=x
stats=Report code statistics (KLOCs, etc) from the application
test=Runs test:units, test:functionals, test:integration together (also available: test:benchmark, test:profile, test:plugins)
test\:benchmark=
test\:functionals=
test\:integration=
test\:plugins=
test\:prepare=
test\:profile=
test\:recent=Run tests for {:recent=>"test:prepare"} / Test recent changes
test\:single=Run tests for {:single=>"test:prepare"}
test\:uncommitted=Run tests for {:uncommitted=>"test:prepare"} / Test changes since last checkin (only Subversion and Git)
test\:units=
time\:zones\:all=Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6
time\:zones\:local=
time\:zones\:us=
tmp\:cache\:clear=
tmp\:clear=Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)
tmp\:create=Creates tmp directories for sessions, cache, sockets, and pids
tmp\:pids\:clear=
tmp\:sessions\:clear=
tmp\:sockets\:clear=
